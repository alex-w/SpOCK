// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIMPARAM_SCHEMA_PSKEL_HXX
#define SIMPARAM_SCHEMA_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
class AreaType_pskel;
class LengthType_pskel;
class InertiaType_pskel;
class MassType_pskel;
class AngleType_pskel;
class PositiveNumber_pskel;
class posV_pskel;
class velV_pskel;
class Vector_pskel;
class RotationMatrix_3x3_pskel;
class Dimensioned_pskel;
class Angle_pskel;
class Altitude_pskel;
class MoI_pskel;
class Mass_pskel;
class simparam_pskel;
class eventsparam_pskel;
class fileheader_pskel;
class reference_pskel;
class Versor_pskel;
class nMAX_pskel;
class SC_Faces_pskel;
class Face_pskel;
class Length_pskel;
class Area_pskel;
class SC_properties_pskel;
class InertiaMatrix_pskel;
class CoG_pskel;
class Coefficients_pskel;
class Areas_pskel;
class SimParameters_pskel;
class durstep_pskel;
class ORB_initstate_pskel;
class ATT_initstate_pskel;
class simoptions_pskel;
class InputFiles_pskel;
class OutputFiles_pskel;
class SensorsActuators_pskel;
class constparam_pskel;
class auxparam_pskel;
class opslimit_pskel;
class accuracy_pskel;
class Maneuvers_pskel;
class Man_pskel;
class CompParameters_pskel;
class Payload_pskel;
class Spacecraft_pskel;
class Compoptions_pskel;
class TGs_pskel;
class TGs_grid_pskel;
class TGs_list_pskel;
class TG_pskel;
class GSs_pskel;
class GS_pskel;
class EventsInputFiles_pskel;
class EventsOutputFiles_pskel;
class license_pskel;
class name_pskel;

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

class AreaType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_AreaType ();
};

class LengthType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_LengthType ();
};

class InertiaType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_InertiaType ();
};

class MassType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_MassType ();
};

class AngleType_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_AngleType ();
};

class PositiveNumber_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_PositiveNumber ();
};

class posV_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  x (double);

  virtual void
  y (double);

  virtual void
  z (double);

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_posV ();

  // Parser construction API.
  //
  void
  x_parser (::xml_schema::double_pskel&);

  void
  y_parser (::xml_schema::double_pskel&);

  void
  z_parser (::xml_schema::double_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::double_pskel& /* x */,
           ::xml_schema::double_pskel& /* y */,
           ::xml_schema::double_pskel& /* z */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  posV_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::double_pskel* x_parser_;
  ::xml_schema::double_pskel* y_parser_;
  ::xml_schema::double_pskel* z_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class velV_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  vx (double);

  virtual void
  vy (double);

  virtual void
  vz (double);

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_velV ();

  // Parser construction API.
  //
  void
  vx_parser (::xml_schema::double_pskel&);

  void
  vy_parser (::xml_schema::double_pskel&);

  void
  vz_parser (::xml_schema::double_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::double_pskel& /* vx */,
           ::xml_schema::double_pskel& /* vy */,
           ::xml_schema::double_pskel& /* vz */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  velV_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::double_pskel* vx_parser_;
  ::xml_schema::double_pskel* vy_parser_;
  ::xml_schema::double_pskel* vz_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class Vector_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  x (double);

  virtual void
  y (double);

  virtual void
  z (double);

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_Vector ();

  // Parser construction API.
  //
  void
  x_parser (::xml_schema::double_pskel&);

  void
  y_parser (::xml_schema::double_pskel&);

  void
  z_parser (::xml_schema::double_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::double_pskel& /* x */,
           ::xml_schema::double_pskel& /* y */,
           ::xml_schema::double_pskel& /* z */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  Vector_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::double_pskel* x_parser_;
  ::xml_schema::double_pskel* y_parser_;
  ::xml_schema::double_pskel* z_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class RotationMatrix_3x3_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  m11 (double);

  virtual void
  m12 (double);

  virtual void
  m13 (double);

  virtual void
  m21 (double);

  virtual void
  m22 (double);

  virtual void
  m23 (double);

  virtual void
  m31 (double);

  virtual void
  m32 (double);

  virtual void
  m33 (double);

  virtual void
  name (const ::std::string&);

  virtual void
  post_RotationMatrix_3x3 ();

  // Parser construction API.
  //
  void
  m11_parser (::xml_schema::double_pskel&);

  void
  m12_parser (::xml_schema::double_pskel&);

  void
  m13_parser (::xml_schema::double_pskel&);

  void
  m21_parser (::xml_schema::double_pskel&);

  void
  m22_parser (::xml_schema::double_pskel&);

  void
  m23_parser (::xml_schema::double_pskel&);

  void
  m31_parser (::xml_schema::double_pskel&);

  void
  m32_parser (::xml_schema::double_pskel&);

  void
  m33_parser (::xml_schema::double_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::double_pskel& /* m11 */,
           ::xml_schema::double_pskel& /* m12 */,
           ::xml_schema::double_pskel& /* m13 */,
           ::xml_schema::double_pskel& /* m21 */,
           ::xml_schema::double_pskel& /* m22 */,
           ::xml_schema::double_pskel& /* m23 */,
           ::xml_schema::double_pskel& /* m31 */,
           ::xml_schema::double_pskel& /* m32 */,
           ::xml_schema::double_pskel& /* m33 */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  RotationMatrix_3x3_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::double_pskel* m11_parser_;
  ::xml_schema::double_pskel* m12_parser_;
  ::xml_schema::double_pskel* m13_parser_;
  ::xml_schema::double_pskel* m21_parser_;
  ::xml_schema::double_pskel* m22_parser_;
  ::xml_schema::double_pskel* m23_parser_;
  ::xml_schema::double_pskel* m31_parser_;
  ::xml_schema::double_pskel* m32_parser_;
  ::xml_schema::double_pskel* m33_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class Dimensioned_pskel: public virtual ::PositiveNumber_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit (const ::std::string&);

  virtual void
  post_Dimensioned ();

  // Parser construction API.
  //
  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  Dimensioned_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* unit_parser_;
};

class Angle_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit ();

  virtual void
  post_Angle ();

  // Parser construction API.
  //
  void
  unit_parser (::AngleType_pskel&);

  void
  parsers (::AngleType_pskel& /* unit */);

  // Constructor.
  //
  Angle_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::AngleType_pskel* unit_parser_;
};

class Altitude_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit ();

  virtual void
  post_Altitude ();

  // Parser construction API.
  //
  void
  unit_parser (::LengthType_pskel&);

  void
  parsers (::LengthType_pskel& /* unit */);

  // Constructor.
  //
  Altitude_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::LengthType_pskel* unit_parser_;
};

class MoI_pskel: public virtual ::PositiveNumber_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit ();

  virtual void
  post_MoI ();

  // Parser construction API.
  //
  void
  unit_parser (::InertiaType_pskel&);

  void
  parsers (::InertiaType_pskel& /* unit */);

  // Constructor.
  //
  MoI_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::InertiaType_pskel* unit_parser_;
};

class Mass_pskel: public virtual ::PositiveNumber_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit ();

  virtual void
  post_Mass ();

  // Parser construction API.
  //
  void
  unit_parser (::MassType_pskel&);

  void
  parsers (::MassType_pskel& /* unit */);

  // Constructor.
  //
  Mass_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::MassType_pskel* unit_parser_;
};

class simparam_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  fileheader ();

  virtual void
  SC_Faces ();

  virtual void
  SC_properties ();

  virtual void
  InputFiles ();

  virtual void
  OutputFiles ();

  virtual void
  SimParameters ();

  virtual void
  SensorsActuators ();

  virtual void
  Maneuvers ();

  virtual void
  name (const ::std::string&);

  virtual void
  post_simparam ();

  // Parser construction API.
  //
  void
  fileheader_parser (::fileheader_pskel&);

  void
  SC_Faces_parser (::SC_Faces_pskel&);

  void
  SC_properties_parser (::SC_properties_pskel&);

  void
  InputFiles_parser (::InputFiles_pskel&);

  void
  OutputFiles_parser (::OutputFiles_pskel&);

  void
  SimParameters_parser (::SimParameters_pskel&);

  void
  SensorsActuators_parser (::SensorsActuators_pskel&);

  void
  Maneuvers_parser (::Maneuvers_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::fileheader_pskel& /* fileheader */,
           ::SC_Faces_pskel& /* SC_Faces */,
           ::SC_properties_pskel& /* SC_properties */,
           ::InputFiles_pskel& /* InputFiles */,
           ::OutputFiles_pskel& /* OutputFiles */,
           ::SimParameters_pskel& /* SimParameters */,
           ::SensorsActuators_pskel& /* SensorsActuators */,
           ::Maneuvers_pskel& /* Maneuvers */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  simparam_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::fileheader_pskel* fileheader_parser_;
  ::SC_Faces_pskel* SC_Faces_parser_;
  ::SC_properties_pskel* SC_properties_parser_;
  ::InputFiles_pskel* InputFiles_parser_;
  ::OutputFiles_pskel* OutputFiles_parser_;
  ::SimParameters_pskel* SimParameters_parser_;
  ::SensorsActuators_pskel* SensorsActuators_parser_;
  ::Maneuvers_pskel* Maneuvers_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class eventsparam_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  fileheader ();

  virtual void
  CompParameters ();

  virtual void
  TGs ();

  virtual void
  GSs ();

  virtual void
  EventsInputFiles ();

  virtual void
  EventsOutputFiles ();

  virtual void
  name (const ::std::string&);

  virtual void
  post_eventsparam ();

  // Parser construction API.
  //
  void
  fileheader_parser (::fileheader_pskel&);

  void
  CompParameters_parser (::CompParameters_pskel&);

  void
  TGs_parser (::TGs_pskel&);

  void
  GSs_parser (::GSs_pskel&);

  void
  EventsInputFiles_parser (::EventsInputFiles_pskel&);

  void
  EventsOutputFiles_parser (::EventsOutputFiles_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::fileheader_pskel& /* fileheader */,
           ::CompParameters_pskel& /* CompParameters */,
           ::TGs_pskel& /* TGs */,
           ::GSs_pskel& /* GSs */,
           ::EventsInputFiles_pskel& /* EventsInputFiles */,
           ::EventsOutputFiles_pskel& /* EventsOutputFiles */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  eventsparam_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::fileheader_pskel* fileheader_parser_;
  ::CompParameters_pskel* CompParameters_parser_;
  ::TGs_pskel* TGs_parser_;
  ::GSs_pskel* GSs_parser_;
  ::EventsInputFiles_pskel* EventsInputFiles_parser_;
  ::EventsOutputFiles_pskel* EventsOutputFiles_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class fileheader_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  author (const ::std::string&);

  virtual void
  email (const ::std::string&);

  virtual void
  organization (const ::std::string&);

  virtual void
  license ();

  virtual void
  sensitivity (const ::std::string&);

  virtual void
  filecreationdate (const ::xml_schema::date&);

  virtual void
  version (const ::std::string&);

  virtual void
  description (const ::std::string&);

  virtual void
  note (const ::std::string&);

  virtual void
  limitation (const ::std::string&);

  virtual void
  reference ();

  virtual void
  post_fileheader ();

  // Parser construction API.
  //
  void
  author_parser (::xml_schema::string_pskel&);

  void
  email_parser (::xml_schema::string_pskel&);

  void
  organization_parser (::xml_schema::string_pskel&);

  void
  license_parser (::license_pskel&);

  void
  sensitivity_parser (::xml_schema::string_pskel&);

  void
  filecreationdate_parser (::xml_schema::date_pskel&);

  void
  version_parser (::xml_schema::string_pskel&);

  void
  description_parser (::xml_schema::string_pskel&);

  void
  note_parser (::xml_schema::string_pskel&);

  void
  limitation_parser (::xml_schema::string_pskel&);

  void
  reference_parser (::reference_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* author */,
           ::xml_schema::string_pskel& /* email */,
           ::xml_schema::string_pskel& /* organization */,
           ::license_pskel& /* license */,
           ::xml_schema::string_pskel& /* sensitivity */,
           ::xml_schema::date_pskel& /* filecreationdate */,
           ::xml_schema::string_pskel& /* version */,
           ::xml_schema::string_pskel& /* description */,
           ::xml_schema::string_pskel& /* note */,
           ::xml_schema::string_pskel& /* limitation */,
           ::reference_pskel& /* reference */);

  // Constructor.
  //
  fileheader_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* author_parser_;
  ::xml_schema::string_pskel* email_parser_;
  ::xml_schema::string_pskel* organization_parser_;
  ::license_pskel* license_parser_;
  ::xml_schema::string_pskel* sensitivity_parser_;
  ::xml_schema::date_pskel* filecreationdate_parser_;
  ::xml_schema::string_pskel* version_parser_;
  ::xml_schema::string_pskel* description_parser_;
  ::xml_schema::string_pskel* note_parser_;
  ::xml_schema::string_pskel* limitation_parser_;
  ::reference_pskel* reference_parser_;
};

class reference_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  author (const ::std::string&);

  virtual void
  date (const ::std::string&);

  virtual void
  refID (const ::std::string&);

  virtual void
  title (const ::std::string&);

  virtual void
  post_reference ();

  // Parser construction API.
  //
  void
  author_parser (::xml_schema::string_pskel&);

  void
  date_parser (::xml_schema::string_pskel&);

  void
  refID_parser (::xml_schema::string_pskel&);

  void
  title_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* author */,
           ::xml_schema::string_pskel& /* date */,
           ::xml_schema::string_pskel& /* refID */,
           ::xml_schema::string_pskel& /* title */);

  // Constructor.
  //
  reference_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* author_parser_;
  ::xml_schema::string_pskel* date_parser_;
  ::xml_schema::string_pskel* refID_parser_;
  ::xml_schema::string_pskel* title_parser_;
};

class Versor_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  x (double);

  virtual void
  y (double);

  virtual void
  z (double);

  virtual void
  name (const ::std::string&);

  virtual void
  post_Versor ();

  // Parser construction API.
  //
  void
  x_parser (::xml_schema::double_pskel&);

  void
  y_parser (::xml_schema::double_pskel&);

  void
  z_parser (::xml_schema::double_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::double_pskel& /* x */,
           ::xml_schema::double_pskel& /* y */,
           ::xml_schema::double_pskel& /* z */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  Versor_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::double_pskel* x_parser_;
  ::xml_schema::double_pskel* y_parser_;
  ::xml_schema::double_pskel* z_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class nMAX_pskel: public virtual ::xml_schema::integer_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_nMAX ();
};

class SC_Faces_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Face ();

  virtual void
  post_SC_Faces ();

  // Parser construction API.
  //
  void
  Face_parser (::Face_pskel&);

  void
  parsers (::Face_pskel& /* Face */);

  // Constructor.
  //
  SC_Faces_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::Face_pskel* Face_parser_;
};

class Face_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Area ();

  virtual void
  Versor ();

  virtual void
  Material (const ::std::string&);

  virtual void
  cP_position ();

  virtual void
  cA_position ();

  virtual void
  name (const ::std::string&);

  virtual void
  post_Face ();

  // Parser construction API.
  //
  void
  Area_parser (::Area_pskel&);

  void
  Versor_parser (::Versor_pskel&);

  void
  Material_parser (::xml_schema::string_pskel&);

  void
  cP_position_parser (::posV_pskel&);

  void
  cA_position_parser (::posV_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::Area_pskel& /* Area */,
           ::Versor_pskel& /* Versor */,
           ::xml_schema::string_pskel& /* Material */,
           ::posV_pskel& /* cP_position */,
           ::posV_pskel& /* cA_position */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  Face_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::Area_pskel* Area_parser_;
  ::Versor_pskel* Versor_parser_;
  ::xml_schema::string_pskel* Material_parser_;
  ::posV_pskel* cP_position_parser_;
  ::posV_pskel* cA_position_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class Length_pskel: public virtual ::PositiveNumber_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit ();

  virtual void
  post_Length ();

  // Parser construction API.
  //
  void
  unit_parser (::LengthType_pskel&);

  void
  parsers (::LengthType_pskel& /* unit */);

  // Constructor.
  //
  Length_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::LengthType_pskel* unit_parser_;
};

class Area_pskel: public virtual ::PositiveNumber_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  unit ();

  virtual void
  post_Area ();

  // Parser construction API.
  //
  void
  unit_parser (::AreaType_pskel&);

  void
  parsers (::AreaType_pskel& /* unit */);

  // Constructor.
  //
  Area_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::AreaType_pskel* unit_parser_;
};

class SC_properties_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  InertiaMatrix ();

  virtual void
  CoG ();

  virtual void
  Coefficients ();

  virtual void
  Areas ();

  virtual void
  SC_dipole ();

  virtual void
  post_SC_properties ();

  // Parser construction API.
  //
  void
  InertiaMatrix_parser (::InertiaMatrix_pskel&);

  void
  CoG_parser (::CoG_pskel&);

  void
  Coefficients_parser (::Coefficients_pskel&);

  void
  Areas_parser (::Areas_pskel&);

  void
  SC_dipole_parser (::posV_pskel&);

  void
  parsers (::InertiaMatrix_pskel& /* InertiaMatrix */,
           ::CoG_pskel& /* CoG */,
           ::Coefficients_pskel& /* Coefficients */,
           ::Areas_pskel& /* Areas */,
           ::posV_pskel& /* SC_dipole */);

  // Constructor.
  //
  SC_properties_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::InertiaMatrix_pskel* InertiaMatrix_parser_;
  ::CoG_pskel* CoG_parser_;
  ::Coefficients_pskel* Coefficients_parser_;
  ::Areas_pskel* Areas_parser_;
  ::posV_pskel* SC_dipole_parser_;
};

class InertiaMatrix_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Ixx ();

  virtual void
  Iyy ();

  virtual void
  Izz ();

  virtual void
  Ixy (double);

  virtual void
  Ixz (double);

  virtual void
  Iyz (double);

  virtual void
  unit ();

  virtual void
  post_InertiaMatrix ();

  // Parser construction API.
  //
  void
  Ixx_parser (::MoI_pskel&);

  void
  Iyy_parser (::MoI_pskel&);

  void
  Izz_parser (::MoI_pskel&);

  void
  Ixy_parser (::xml_schema::double_pskel&);

  void
  Ixz_parser (::xml_schema::double_pskel&);

  void
  Iyz_parser (::xml_schema::double_pskel&);

  void
  unit_parser (::InertiaType_pskel&);

  void
  parsers (::MoI_pskel& /* Ixx */,
           ::MoI_pskel& /* Iyy */,
           ::MoI_pskel& /* Izz */,
           ::xml_schema::double_pskel& /* Ixy */,
           ::xml_schema::double_pskel& /* Ixz */,
           ::xml_schema::double_pskel& /* Iyz */,
           ::InertiaType_pskel& /* unit */);

  // Constructor.
  //
  InertiaMatrix_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::MoI_pskel* Ixx_parser_;
  ::MoI_pskel* Iyy_parser_;
  ::MoI_pskel* Izz_parser_;
  ::xml_schema::double_pskel* Ixy_parser_;
  ::xml_schema::double_pskel* Ixz_parser_;
  ::xml_schema::double_pskel* Iyz_parser_;
  ::InertiaType_pskel* unit_parser_;
};

class CoG_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  SC_mass ();

  virtual void
  CoG_pos ();

  virtual void
  post_CoG ();

  // Parser construction API.
  //
  void
  SC_mass_parser (::Mass_pskel&);

  void
  CoG_pos_parser (::posV_pskel&);

  void
  parsers (::Mass_pskel& /* SC_mass */,
           ::posV_pskel& /* CoG_pos */);

  // Constructor.
  //
  CoG_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::Mass_pskel* SC_mass_parser_;
  ::posV_pskel* CoG_pos_parser_;
};

class Coefficients_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Cd ();

  virtual void
  Cr ();

  virtual void
  post_Coefficients ();

  // Parser construction API.
  //
  void
  Cd_parser (::PositiveNumber_pskel&);

  void
  Cr_parser (::PositiveNumber_pskel&);

  void
  parsers (::PositiveNumber_pskel& /* Cd */,
           ::PositiveNumber_pskel& /* Cr */);

  // Constructor.
  //
  Coefficients_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::PositiveNumber_pskel* Cd_parser_;
  ::PositiveNumber_pskel* Cr_parser_;
};

class Areas_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Area_D ();

  virtual void
  Area_R ();

  virtual void
  post_Areas ();

  // Parser construction API.
  //
  void
  Area_D_parser (::PositiveNumber_pskel&);

  void
  Area_R_parser (::PositiveNumber_pskel&);

  void
  parsers (::PositiveNumber_pskel& /* Area_D */,
           ::PositiveNumber_pskel& /* Area_R */);

  // Constructor.
  //
  Areas_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::PositiveNumber_pskel* Area_D_parser_;
  ::PositiveNumber_pskel* Area_R_parser_;
};

class SimParameters_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  durstep ();

  virtual void
  ORB_initstate ();

  virtual void
  ATT_initstate ();

  virtual void
  simoptions ();

  virtual void
  post_SimParameters ();

  // Parser construction API.
  //
  void
  durstep_parser (::durstep_pskel&);

  void
  ORB_initstate_parser (::ORB_initstate_pskel&);

  void
  ATT_initstate_parser (::ATT_initstate_pskel&);

  void
  simoptions_parser (::simoptions_pskel&);

  void
  parsers (::durstep_pskel& /* durstep */,
           ::ORB_initstate_pskel& /* ORB_initstate */,
           ::ATT_initstate_pskel& /* ATT_initstate */,
           ::simoptions_pskel& /* simoptions */);

  // Constructor.
  //
  SimParameters_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::durstep_pskel* durstep_parser_;
  ::ORB_initstate_pskel* ORB_initstate_parser_;
  ::ATT_initstate_pskel* ATT_initstate_parser_;
  ::simoptions_pskel* simoptions_parser_;
};

class durstep_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  simstep (const ::xml_schema::duration&);

  virtual void
  simduration (const ::xml_schema::duration&);

  virtual void
  post_durstep ();

  // Parser construction API.
  //
  void
  simstep_parser (::xml_schema::duration_pskel&);

  void
  simduration_parser (::xml_schema::duration_pskel&);

  void
  parsers (::xml_schema::duration_pskel& /* simstep */,
           ::xml_schema::duration_pskel& /* simduration */);

  // Constructor.
  //
  durstep_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::duration_pskel* simstep_parser_;
  ::xml_schema::duration_pskel* simduration_parser_;
};

class ORB_initstate_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Initime (const ::xml_schema::date_time&);

  virtual void
  Position ();

  virtual void
  Velocity ();

  virtual void
  post_ORB_initstate ();

  // Parser construction API.
  //
  void
  Initime_parser (::xml_schema::date_time_pskel&);

  void
  Position_parser (::posV_pskel&);

  void
  Velocity_parser (::velV_pskel&);

  void
  parsers (::xml_schema::date_time_pskel& /* Initime */,
           ::posV_pskel& /* Position */,
           ::velV_pskel& /* Velocity */);

  // Constructor.
  //
  ORB_initstate_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::date_time_pskel* Initime_parser_;
  ::posV_pskel* Position_parser_;
  ::velV_pskel* Velocity_parser_;
};

class ATT_initstate_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  phi ();

  virtual void
  theta ();

  virtual void
  psi ();

  virtual void
  om_x ();

  virtual void
  om_y ();

  virtual void
  om_z ();

  virtual void
  post_ATT_initstate ();

  // Parser construction API.
  //
  void
  phi_parser (::Angle_pskel&);

  void
  theta_parser (::Angle_pskel&);

  void
  psi_parser (::Angle_pskel&);

  void
  om_x_parser (::Angle_pskel&);

  void
  om_y_parser (::Angle_pskel&);

  void
  om_z_parser (::Angle_pskel&);

  void
  parsers (::Angle_pskel& /* phi */,
           ::Angle_pskel& /* theta */,
           ::Angle_pskel& /* psi */,
           ::Angle_pskel& /* om_x */,
           ::Angle_pskel& /* om_y */,
           ::Angle_pskel& /* om_z */);

  // Constructor.
  //
  ATT_initstate_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::Angle_pskel* phi_parser_;
  ::Angle_pskel* theta_parser_;
  ::Angle_pskel* psi_parser_;
  ::Angle_pskel* om_x_parser_;
  ::Angle_pskel* om_y_parser_;
  ::Angle_pskel* om_z_parser_;
};

class simoptions_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  initstate_in_RTN (bool);

  virtual void
  realtime (bool);

  virtual void
  realtime_wait ();

  virtual void
  ggrad_on (bool);

  virtual void
  mag_on (bool);

  virtual void
  srp_on (bool);

  virtual void
  drag_on (bool);

  virtual void
  nMAX ();

  virtual void
  sunmoon_on (bool);

  virtual void
  Drag_Model (const ::std::string&);

  virtual void
  SRP_Model (const ::std::string&);

  virtual void
  AttitudeType (const ::std::string&);

  virtual void
  attctrl_on (bool);

  virtual void
  AttCtrlType (const ::std::string&);

  virtual void
  orbctrl_on (bool);

  virtual void
  OrbCtrlType (const ::std::string&);

  virtual void
  post_simoptions ();

  // Parser construction API.
  //
  void
  initstate_in_RTN_parser (::xml_schema::boolean_pskel&);

  void
  realtime_parser (::xml_schema::boolean_pskel&);

  void
  realtime_wait_parser (::Dimensioned_pskel&);

  void
  ggrad_on_parser (::xml_schema::boolean_pskel&);

  void
  mag_on_parser (::xml_schema::boolean_pskel&);

  void
  srp_on_parser (::xml_schema::boolean_pskel&);

  void
  drag_on_parser (::xml_schema::boolean_pskel&);

  void
  nMAX_parser (::nMAX_pskel&);

  void
  sunmoon_on_parser (::xml_schema::boolean_pskel&);

  void
  Drag_Model_parser (::xml_schema::string_pskel&);

  void
  SRP_Model_parser (::xml_schema::string_pskel&);

  void
  AttitudeType_parser (::xml_schema::string_pskel&);

  void
  attctrl_on_parser (::xml_schema::boolean_pskel&);

  void
  AttCtrlType_parser (::xml_schema::string_pskel&);

  void
  orbctrl_on_parser (::xml_schema::boolean_pskel&);

  void
  OrbCtrlType_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::boolean_pskel& /* initstate_in_RTN */,
           ::xml_schema::boolean_pskel& /* realtime */,
           ::Dimensioned_pskel& /* realtime_wait */,
           ::xml_schema::boolean_pskel& /* ggrad_on */,
           ::xml_schema::boolean_pskel& /* mag_on */,
           ::xml_schema::boolean_pskel& /* srp_on */,
           ::xml_schema::boolean_pskel& /* drag_on */,
           ::nMAX_pskel& /* nMAX */,
           ::xml_schema::boolean_pskel& /* sunmoon_on */,
           ::xml_schema::string_pskel& /* Drag_Model */,
           ::xml_schema::string_pskel& /* SRP_Model */,
           ::xml_schema::string_pskel& /* AttitudeType */,
           ::xml_schema::boolean_pskel& /* attctrl_on */,
           ::xml_schema::string_pskel& /* AttCtrlType */,
           ::xml_schema::boolean_pskel& /* orbctrl_on */,
           ::xml_schema::string_pskel& /* OrbCtrlType */);

  // Constructor.
  //
  simoptions_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::boolean_pskel* initstate_in_RTN_parser_;
  ::xml_schema::boolean_pskel* realtime_parser_;
  ::Dimensioned_pskel* realtime_wait_parser_;
  ::xml_schema::boolean_pskel* ggrad_on_parser_;
  ::xml_schema::boolean_pskel* mag_on_parser_;
  ::xml_schema::boolean_pskel* srp_on_parser_;
  ::xml_schema::boolean_pskel* drag_on_parser_;
  ::nMAX_pskel* nMAX_parser_;
  ::xml_schema::boolean_pskel* sunmoon_on_parser_;
  ::xml_schema::string_pskel* Drag_Model_parser_;
  ::xml_schema::string_pskel* SRP_Model_parser_;
  ::xml_schema::string_pskel* AttitudeType_parser_;
  ::xml_schema::boolean_pskel* attctrl_on_parser_;
  ::xml_schema::string_pskel* AttCtrlType_parser_;
  ::xml_schema::boolean_pskel* orbctrl_on_parser_;
  ::xml_schema::string_pskel* OrbCtrlType_parser_;
};

class InputFiles_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Orbit_ephemeris (const ::std::string&);

  virtual void
  Attitude_ephemeris (const ::std::string&);

  virtual void
  TLE (const ::std::string&);

  virtual void
  Data_path (const ::std::string&);

  virtual void
  Planet_ephemeris (const ::std::string&);

  virtual void
  EOP_parameters (const ::std::string&);

  virtual void
  PCK_data (const ::std::string&);

  virtual void
  Leap_second (const ::std::string&);

  virtual void
  Gravity_model (const ::std::string&);

  virtual void
  Atmospheric_model (const ::std::string&);

  virtual void
  Magnetic_model (const ::std::string&);

  virtual void
  SunMoon_model (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  post_InputFiles ();

  // Parser construction API.
  //
  void
  Orbit_ephemeris_parser (::xml_schema::string_pskel&);

  void
  Attitude_ephemeris_parser (::xml_schema::string_pskel&);

  void
  TLE_parser (::xml_schema::string_pskel&);

  void
  Data_path_parser (::xml_schema::string_pskel&);

  void
  Planet_ephemeris_parser (::xml_schema::string_pskel&);

  void
  EOP_parameters_parser (::xml_schema::string_pskel&);

  void
  PCK_data_parser (::xml_schema::string_pskel&);

  void
  Leap_second_parser (::xml_schema::string_pskel&);

  void
  Gravity_model_parser (::xml_schema::string_pskel&);

  void
  Atmospheric_model_parser (::xml_schema::string_pskel&);

  void
  Magnetic_model_parser (::xml_schema::string_pskel&);

  void
  SunMoon_model_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* Orbit_ephemeris */,
           ::xml_schema::string_pskel& /* Attitude_ephemeris */,
           ::xml_schema::string_pskel& /* TLE */,
           ::xml_schema::string_pskel& /* Data_path */,
           ::xml_schema::string_pskel& /* Planet_ephemeris */,
           ::xml_schema::string_pskel& /* EOP_parameters */,
           ::xml_schema::string_pskel& /* PCK_data */,
           ::xml_schema::string_pskel& /* Leap_second */,
           ::xml_schema::string_pskel& /* Gravity_model */,
           ::xml_schema::string_pskel& /* Atmospheric_model */,
           ::xml_schema::string_pskel& /* Magnetic_model */,
           ::xml_schema::string_pskel& /* SunMoon_model */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  InputFiles_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Orbit_ephemeris_parser_;
  ::xml_schema::string_pskel* Attitude_ephemeris_parser_;
  ::xml_schema::string_pskel* TLE_parser_;
  ::xml_schema::string_pskel* Data_path_parser_;
  ::xml_schema::string_pskel* Planet_ephemeris_parser_;
  ::xml_schema::string_pskel* EOP_parameters_parser_;
  ::xml_schema::string_pskel* PCK_data_parser_;
  ::xml_schema::string_pskel* Leap_second_parser_;
  ::xml_schema::string_pskel* Gravity_model_parser_;
  ::xml_schema::string_pskel* Atmospheric_model_parser_;
  ::xml_schema::string_pskel* Magnetic_model_parser_;
  ::xml_schema::string_pskel* SunMoon_model_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class OutputFiles_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Orbit_ephemeris (const ::std::string&);

  virtual void
  Attitude_ephemeris (const ::std::string&);

  virtual void
  Sensor_output (const ::std::string&);

  virtual void
  Torques (const ::std::string&);

  virtual void
  Accelerations (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  post_OutputFiles ();

  // Parser construction API.
  //
  void
  Orbit_ephemeris_parser (::xml_schema::string_pskel&);

  void
  Attitude_ephemeris_parser (::xml_schema::string_pskel&);

  void
  Sensor_output_parser (::xml_schema::string_pskel&);

  void
  Torques_parser (::xml_schema::string_pskel&);

  void
  Accelerations_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* Orbit_ephemeris */,
           ::xml_schema::string_pskel& /* Attitude_ephemeris */,
           ::xml_schema::string_pskel& /* Sensor_output */,
           ::xml_schema::string_pskel& /* Torques */,
           ::xml_schema::string_pskel& /* Accelerations */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  OutputFiles_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Orbit_ephemeris_parser_;
  ::xml_schema::string_pskel* Attitude_ephemeris_parser_;
  ::xml_schema::string_pskel* Sensor_output_parser_;
  ::xml_schema::string_pskel* Torques_parser_;
  ::xml_schema::string_pskel* Accelerations_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class SensorsActuators_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  subsystem_on (bool);

  virtual void
  constparam ();

  virtual void
  auxparam ();

  virtual void
  opslimit ();

  virtual void
  accuracy ();

  virtual void
  SC2SYS_matrix ();

  virtual void
  name (const ::std::string&);

  virtual void
  post_SensorsActuators ();

  // Parser construction API.
  //
  void
  subsystem_on_parser (::xml_schema::boolean_pskel&);

  void
  constparam_parser (::constparam_pskel&);

  void
  auxparam_parser (::auxparam_pskel&);

  void
  opslimit_parser (::opslimit_pskel&);

  void
  accuracy_parser (::accuracy_pskel&);

  void
  SC2SYS_matrix_parser (::RotationMatrix_3x3_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::boolean_pskel& /* subsystem_on */,
           ::constparam_pskel& /* constparam */,
           ::auxparam_pskel& /* auxparam */,
           ::opslimit_pskel& /* opslimit */,
           ::accuracy_pskel& /* accuracy */,
           ::RotationMatrix_3x3_pskel& /* SC2SYS_matrix */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  SensorsActuators_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::boolean_pskel* subsystem_on_parser_;
  ::constparam_pskel* constparam_parser_;
  ::auxparam_pskel* auxparam_parser_;
  ::opslimit_pskel* opslimit_parser_;
  ::accuracy_pskel* accuracy_parser_;
  ::RotationMatrix_3x3_pskel* SC2SYS_matrix_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class constparam_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_constparam ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  constparam_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class auxparam_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_auxparam ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  auxparam_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class opslimit_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_opslimit ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  opslimit_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class accuracy_pskel: public virtual ::xml_schema::double_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  name (const ::std::string&);

  virtual void
  unit (const ::std::string&);

  virtual void
  post_accuracy ();

  // Parser construction API.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  unit_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* unit */);

  // Constructor.
  //
  accuracy_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* unit_parser_;
};

class Maneuvers_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Man ();

  virtual void
  post_Maneuvers ();

  // Parser construction API.
  //
  void
  Man_parser (::Man_pskel&);

  void
  parsers (::Man_pskel& /* Man */);

  // Constructor.
  //
  Maneuvers_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::Man_pskel* Man_parser_;
};

class Man_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  maneuver_on (bool);

  virtual void
  init_time (double);

  virtual void
  duration (double);

  virtual void
  ManVec ();

  virtual void
  name ();

  virtual void
  post_Man ();

  // Parser construction API.
  //
  void
  maneuver_on_parser (::xml_schema::boolean_pskel&);

  void
  init_time_parser (::xml_schema::double_pskel&);

  void
  duration_parser (::xml_schema::double_pskel&);

  void
  ManVec_parser (::Vector_pskel&);

  void
  name_parser (::name_pskel&);

  void
  parsers (::xml_schema::boolean_pskel& /* maneuver_on */,
           ::xml_schema::double_pskel& /* init_time */,
           ::xml_schema::double_pskel& /* duration */,
           ::Vector_pskel& /* ManVec */,
           ::name_pskel& /* name */);

  // Constructor.
  //
  Man_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::boolean_pskel* maneuver_on_parser_;
  ::xml_schema::double_pskel* init_time_parser_;
  ::xml_schema::double_pskel* duration_parser_;
  ::Vector_pskel* ManVec_parser_;
  ::name_pskel* name_parser_;
};

class CompParameters_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  durstep ();

  virtual void
  Payload ();

  virtual void
  Spacecraft ();

  virtual void
  Compoptions ();

  virtual void
  post_CompParameters ();

  // Parser construction API.
  //
  void
  durstep_parser (::durstep_pskel&);

  void
  Payload_parser (::Payload_pskel&);

  void
  Spacecraft_parser (::Spacecraft_pskel&);

  void
  Compoptions_parser (::Compoptions_pskel&);

  void
  parsers (::durstep_pskel& /* durstep */,
           ::Payload_pskel& /* Payload */,
           ::Spacecraft_pskel& /* Spacecraft */,
           ::Compoptions_pskel& /* Compoptions */);

  // Constructor.
  //
  CompParameters_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::durstep_pskel* durstep_parser_;
  ::Payload_pskel* Payload_parser_;
  ::Spacecraft_pskel* Spacecraft_parser_;
  ::Compoptions_pskel* Compoptions_parser_;
};

class Payload_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  FOV_cross ();

  virtual void
  FOV_along ();

  virtual void
  post_Payload ();

  // Parser construction API.
  //
  void
  FOV_cross_parser (::Angle_pskel&);

  void
  FOV_along_parser (::Angle_pskel&);

  void
  parsers (::Angle_pskel& /* FOV_cross */,
           ::Angle_pskel& /* FOV_along */);

  // Constructor.
  //
  Payload_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::Angle_pskel* FOV_cross_parser_;
  ::Angle_pskel* FOV_along_parser_;
};

class Spacecraft_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  SC_start (unsigned long long);

  virtual void
  SC_end (unsigned long long);

  virtual void
  PL_start (unsigned long long);

  virtual void
  PL_end (unsigned long long);

  virtual void
  post_Spacecraft ();

  // Parser construction API.
  //
  void
  SC_start_parser (::xml_schema::positive_integer_pskel&);

  void
  SC_end_parser (::xml_schema::positive_integer_pskel&);

  void
  PL_start_parser (::xml_schema::positive_integer_pskel&);

  void
  PL_end_parser (::xml_schema::positive_integer_pskel&);

  void
  parsers (::xml_schema::positive_integer_pskel& /* SC_start */,
           ::xml_schema::positive_integer_pskel& /* SC_end */,
           ::xml_schema::positive_integer_pskel& /* PL_start */,
           ::xml_schema::positive_integer_pskel& /* PL_end */);

  // Constructor.
  //
  Spacecraft_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::positive_integer_pskel* SC_start_parser_;
  ::xml_schema::positive_integer_pskel* SC_end_parser_;
  ::xml_schema::positive_integer_pskel* PL_start_parser_;
  ::xml_schema::positive_integer_pskel* PL_end_parser_;
};

class Compoptions_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  TGs_on (bool);

  virtual void
  GSs_on (bool);

  virtual void
  TGs_grid_on (bool);

  virtual void
  Eclipse_on (bool);

  virtual void
  post_Compoptions ();

  // Parser construction API.
  //
  void
  TGs_on_parser (::xml_schema::boolean_pskel&);

  void
  GSs_on_parser (::xml_schema::boolean_pskel&);

  void
  TGs_grid_on_parser (::xml_schema::boolean_pskel&);

  void
  Eclipse_on_parser (::xml_schema::boolean_pskel&);

  void
  parsers (::xml_schema::boolean_pskel& /* TGs_on */,
           ::xml_schema::boolean_pskel& /* GSs_on */,
           ::xml_schema::boolean_pskel& /* TGs_grid_on */,
           ::xml_schema::boolean_pskel& /* Eclipse_on */);

  // Constructor.
  //
  Compoptions_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::boolean_pskel* TGs_on_parser_;
  ::xml_schema::boolean_pskel* GSs_on_parser_;
  ::xml_schema::boolean_pskel* TGs_grid_on_parser_;
  ::xml_schema::boolean_pskel* Eclipse_on_parser_;
};

class TGs_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  TGs_grid ();

  virtual void
  TGs_list ();

  virtual void
  post_TGs ();

  // Parser construction API.
  //
  void
  TGs_grid_parser (::TGs_grid_pskel&);

  void
  TGs_list_parser (::TGs_list_pskel&);

  void
  parsers (::TGs_grid_pskel& /* TGs_grid */,
           ::TGs_list_pskel& /* TGs_list */);

  // Constructor.
  //
  TGs_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::TGs_grid_pskel* TGs_grid_parser_;
  ::TGs_list_pskel* TGs_list_parser_;
};

class TGs_grid_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  minlon ();

  virtual void
  maxlon ();

  virtual void
  minlat ();

  virtual void
  maxlat ();

  virtual void
  gridstep ();

  virtual void
  post_TGs_grid ();

  // Parser construction API.
  //
  void
  minlon_parser (::Angle_pskel&);

  void
  maxlon_parser (::Angle_pskel&);

  void
  minlat_parser (::Angle_pskel&);

  void
  maxlat_parser (::Angle_pskel&);

  void
  gridstep_parser (::Angle_pskel&);

  void
  parsers (::Angle_pskel& /* minlon */,
           ::Angle_pskel& /* maxlon */,
           ::Angle_pskel& /* minlat */,
           ::Angle_pskel& /* maxlat */,
           ::Angle_pskel& /* gridstep */);

  // Constructor.
  //
  TGs_grid_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::Angle_pskel* minlon_parser_;
  ::Angle_pskel* maxlon_parser_;
  ::Angle_pskel* minlat_parser_;
  ::Angle_pskel* maxlat_parser_;
  ::Angle_pskel* gridstep_parser_;
};

class TGs_list_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  TG ();

  virtual void
  post_TGs_list ();

  // Parser construction API.
  //
  void
  TG_parser (::TG_pskel&);

  void
  parsers (::TG_pskel& /* TG */);

  // Constructor.
  //
  TGs_list_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::TG_pskel* TG_parser_;
};

class TG_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  lon ();

  virtual void
  lat ();

  virtual void
  alt ();

  virtual void
  name (const ::std::string&);

  virtual void
  post_TG ();

  // Parser construction API.
  //
  void
  lon_parser (::Angle_pskel&);

  void
  lat_parser (::Angle_pskel&);

  void
  alt_parser (::Altitude_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::Angle_pskel& /* lon */,
           ::Angle_pskel& /* lat */,
           ::Altitude_pskel& /* alt */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  TG_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::Angle_pskel* lon_parser_;
  ::Angle_pskel* lat_parser_;
  ::Altitude_pskel* alt_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class GSs_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  GS ();

  virtual void
  post_GSs ();

  // Parser construction API.
  //
  void
  GS_parser (::GS_pskel&);

  void
  parsers (::GS_pskel& /* GS */);

  // Constructor.
  //
  GSs_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  protected:
  ::GS_pskel* GS_parser_;
};

class GS_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  lon ();

  virtual void
  lat ();

  virtual void
  alt ();

  virtual void
  minelev ();

  virtual void
  name (const ::std::string&);

  virtual void
  post_GS ();

  // Parser construction API.
  //
  void
  lon_parser (::Angle_pskel&);

  void
  lat_parser (::Angle_pskel&);

  void
  alt_parser (::Altitude_pskel&);

  void
  minelev_parser (::Angle_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::Angle_pskel& /* lon */,
           ::Angle_pskel& /* lat */,
           ::Altitude_pskel& /* alt */,
           ::Angle_pskel& /* minelev */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  GS_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::Angle_pskel* lon_parser_;
  ::Angle_pskel* lat_parser_;
  ::Altitude_pskel* alt_parser_;
  ::Angle_pskel* minelev_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class EventsInputFiles_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  Orbit_ephemeris_path (const ::std::string&);

  virtual void
  Orbit_ephemeris_rootname (const ::std::string&);

  virtual void
  Data_path (const ::std::string&);

  virtual void
  Planet_ephemeris (const ::std::string&);

  virtual void
  EOP_parameters (const ::std::string&);

  virtual void
  PCK_data (const ::std::string&);

  virtual void
  Leap_second (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  post_EventsInputFiles ();

  // Parser construction API.
  //
  void
  Orbit_ephemeris_path_parser (::xml_schema::string_pskel&);

  void
  Orbit_ephemeris_rootname_parser (::xml_schema::string_pskel&);

  void
  Data_path_parser (::xml_schema::string_pskel&);

  void
  Planet_ephemeris_parser (::xml_schema::string_pskel&);

  void
  EOP_parameters_parser (::xml_schema::string_pskel&);

  void
  PCK_data_parser (::xml_schema::string_pskel&);

  void
  Leap_second_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* Orbit_ephemeris_path */,
           ::xml_schema::string_pskel& /* Orbit_ephemeris_rootname */,
           ::xml_schema::string_pskel& /* Data_path */,
           ::xml_schema::string_pskel& /* Planet_ephemeris */,
           ::xml_schema::string_pskel& /* EOP_parameters */,
           ::xml_schema::string_pskel& /* PCK_data */,
           ::xml_schema::string_pskel& /* Leap_second */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  EventsInputFiles_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* Orbit_ephemeris_path_parser_;
  ::xml_schema::string_pskel* Orbit_ephemeris_rootname_parser_;
  ::xml_schema::string_pskel* Data_path_parser_;
  ::xml_schema::string_pskel* Planet_ephemeris_parser_;
  ::xml_schema::string_pskel* EOP_parameters_parser_;
  ::xml_schema::string_pskel* PCK_data_parser_;
  ::xml_schema::string_pskel* Leap_second_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class EventsOutputFiles_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  TG_contacts (const ::std::string&);

  virtual void
  GS_contacts (const ::std::string&);

  virtual void
  Eclipse_times (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  post_EventsOutputFiles ();

  // Parser construction API.
  //
  void
  TG_contacts_parser (::xml_schema::string_pskel&);

  void
  GS_contacts_parser (::xml_schema::string_pskel&);

  void
  Eclipse_times_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* TG_contacts */,
           ::xml_schema::string_pskel& /* GS_contacts */,
           ::xml_schema::string_pskel& /* Eclipse_times */,
           ::xml_schema::string_pskel& /* name */);

  // Constructor.
  //
  EventsOutputFiles_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _start_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string*);

  virtual bool
  _end_element_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* TG_contacts_parser_;
  ::xml_schema::string_pskel* GS_contacts_parser_;
  ::xml_schema::string_pskel* Eclipse_times_parser_;
  ::xml_schema::string_pskel* name_parser_;
};

class license_pskel: public ::xml_schema::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  licenseName (const ::std::string&);

  virtual void
  licenseURL (const ::std::string&);

  virtual void
  post_license ();

  // Parser construction API.
  //
  void
  licenseName_parser (::xml_schema::string_pskel&);

  void
  licenseURL_parser (::xml_schema::uri_pskel&);

  void
  parsers (::xml_schema::string_pskel& /* licenseName */,
           ::xml_schema::uri_pskel& /* licenseURL */);

  // Constructor.
  //
  license_pskel ();

  // Implementation.
  //
  protected:
  virtual bool
  _attribute_impl (const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&,
                   const ::xml_schema::ro_string&);

  protected:
  ::xml_schema::string_pskel* licenseName_parser_;
  ::xml_schema::uri_pskel* licenseURL_parser_;
};

class name_pskel: public virtual ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  virtual void
  post_name ();
};

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIMPARAM_SCHEMA_PSKEL_HXX
